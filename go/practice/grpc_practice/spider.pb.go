// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spider.proto

package spider

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TODO(guest): Describe this message.
type MessageReq struct {
	Messages             []string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageReq) Reset()         { *m = MessageReq{} }
func (m *MessageReq) String() string { return proto.CompactTextString(m) }
func (*MessageReq) ProtoMessage()    {}
func (*MessageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb38e26738aa8833, []int{0}
}

func (m *MessageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageReq.Unmarshal(m, b)
}
func (m *MessageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageReq.Marshal(b, m, deterministic)
}
func (m *MessageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageReq.Merge(m, src)
}
func (m *MessageReq) XXX_Size() int {
	return xxx_messageInfo_MessageReq.Size(m)
}
func (m *MessageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageReq.DiscardUnknown(m)
}

var xxx_messageInfo_MessageReq proto.InternalMessageInfo

func (m *MessageReq) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type MessageRes struct {
	Messages             []string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageRes) Reset()         { *m = MessageRes{} }
func (m *MessageRes) String() string { return proto.CompactTextString(m) }
func (*MessageRes) ProtoMessage()    {}
func (*MessageRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb38e26738aa8833, []int{1}
}

func (m *MessageRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageRes.Unmarshal(m, b)
}
func (m *MessageRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageRes.Marshal(b, m, deterministic)
}
func (m *MessageRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageRes.Merge(m, src)
}
func (m *MessageRes) XXX_Size() int {
	return xxx_messageInfo_MessageRes.Size(m)
}
func (m *MessageRes) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageRes.DiscardUnknown(m)
}

var xxx_messageInfo_MessageRes proto.InternalMessageInfo

func (m *MessageRes) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageReq)(nil), "spider.MessageReq")
	proto.RegisterType((*MessageRes)(nil), "spider.MessageRes")
}

func init() { proto.RegisterFile("spider.proto", fileDescriptor_cb38e26738aa8833) }

var fileDescriptor_cb38e26738aa8833 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0xc8, 0x4c,
	0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x34, 0xb8, 0xb8,
	0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x83, 0x52, 0x0b, 0x85, 0xa4, 0xb8, 0x38, 0x72, 0x21,
	0xbc, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0xce, 0x20, 0x38, 0x1f, 0x45, 0x65, 0x31, 0x3e, 0x95,
	0x46, 0xdf, 0x18, 0xb9, 0x38, 0xdc, 0xf3, 0x83, 0xc1, 0x16, 0x08, 0x99, 0x70, 0x71, 0xb9, 0xa7,
	0x96, 0x40, 0x75, 0x0a, 0x09, 0xe9, 0x41, 0x5d, 0x81, 0xb0, 0x54, 0x0a, 0x53, 0xac, 0x58, 0xc8,
	0x9a, 0x8b, 0xdf, 0x3d, 0xb5, 0xc4, 0x39, 0x27, 0x33, 0x35, 0xaf, 0x24, 0xb8, 0xa4, 0x28, 0x35,
	0x31, 0x97, 0x58, 0xad, 0x1a, 0x8c, 0x50, 0xcd, 0xc1, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0xa4, 0x69,
	0x36, 0x60, 0x14, 0xb2, 0xe2, 0xe2, 0x71, 0x4f, 0x2d, 0x09, 0x29, 0xcf, 0x27, 0xd5, 0x5a, 0x03,
	0x46, 0x27, 0x8e, 0x28, 0x68, 0xb0, 0x26, 0xb1, 0x81, 0x43, 0xd9, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x45, 0x3e, 0x1b, 0x58, 0x75, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GoSpiderClient is the client API for GoSpider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoSpiderClient interface {
	GetMessage(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRes, error)
	GetClientStream(ctx context.Context, opts ...grpc.CallOption) (GoSpider_GetClientStreamClient, error)
	GetServerStream(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (GoSpider_GetServerStreamClient, error)
	GetTwoStream(ctx context.Context, opts ...grpc.CallOption) (GoSpider_GetTwoStreamClient, error)
}

type goSpiderClient struct {
	cc grpc.ClientConnInterface
}

func NewGoSpiderClient(cc grpc.ClientConnInterface) GoSpiderClient {
	return &goSpiderClient{cc}
}

func (c *goSpiderClient) GetMessage(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRes, error) {
	out := new(MessageRes)
	err := c.cc.Invoke(ctx, "/spider.GoSpider/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSpiderClient) GetClientStream(ctx context.Context, opts ...grpc.CallOption) (GoSpider_GetClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoSpider_serviceDesc.Streams[0], "/spider.GoSpider/GetClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &goSpiderGetClientStreamClient{stream}
	return x, nil
}

type GoSpider_GetClientStreamClient interface {
	Send(*MessageReq) error
	CloseAndRecv() (*MessageRes, error)
	grpc.ClientStream
}

type goSpiderGetClientStreamClient struct {
	grpc.ClientStream
}

func (x *goSpiderGetClientStreamClient) Send(m *MessageReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goSpiderGetClientStreamClient) CloseAndRecv() (*MessageRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goSpiderClient) GetServerStream(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (GoSpider_GetServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoSpider_serviceDesc.Streams[1], "/spider.GoSpider/GetServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &goSpiderGetServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoSpider_GetServerStreamClient interface {
	Recv() (*MessageRes, error)
	grpc.ClientStream
}

type goSpiderGetServerStreamClient struct {
	grpc.ClientStream
}

func (x *goSpiderGetServerStreamClient) Recv() (*MessageRes, error) {
	m := new(MessageRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goSpiderClient) GetTwoStream(ctx context.Context, opts ...grpc.CallOption) (GoSpider_GetTwoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoSpider_serviceDesc.Streams[2], "/spider.GoSpider/GetTwoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &goSpiderGetTwoStreamClient{stream}
	return x, nil
}

type GoSpider_GetTwoStreamClient interface {
	Send(*MessageReq) error
	Recv() (*MessageRes, error)
	grpc.ClientStream
}

type goSpiderGetTwoStreamClient struct {
	grpc.ClientStream
}

func (x *goSpiderGetTwoStreamClient) Send(m *MessageReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goSpiderGetTwoStreamClient) Recv() (*MessageRes, error) {
	m := new(MessageRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoSpiderServer is the server API for GoSpider service.
type GoSpiderServer interface {
	GetMessage(context.Context, *MessageReq) (*MessageRes, error)
	GetClientStream(GoSpider_GetClientStreamServer) error
	GetServerStream(*MessageReq, GoSpider_GetServerStreamServer) error
	GetTwoStream(GoSpider_GetTwoStreamServer) error
}

// UnimplementedGoSpiderServer can be embedded to have forward compatible implementations.
type UnimplementedGoSpiderServer struct {
}

func (*UnimplementedGoSpiderServer) GetMessage(ctx context.Context, req *MessageReq) (*MessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedGoSpiderServer) GetClientStream(srv GoSpider_GetClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClientStream not implemented")
}
func (*UnimplementedGoSpiderServer) GetServerStream(req *MessageReq, srv GoSpider_GetServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetServerStream not implemented")
}
func (*UnimplementedGoSpiderServer) GetTwoStream(srv GoSpider_GetTwoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTwoStream not implemented")
}

func RegisterGoSpiderServer(s *grpc.Server, srv GoSpiderServer) {
	s.RegisterService(&_GoSpider_serviceDesc, srv)
}

func _GoSpider_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSpiderServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spider.GoSpider/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSpiderServer).GetMessage(ctx, req.(*MessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSpider_GetClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoSpiderServer).GetClientStream(&goSpiderGetClientStreamServer{stream})
}

type GoSpider_GetClientStreamServer interface {
	SendAndClose(*MessageRes) error
	Recv() (*MessageReq, error)
	grpc.ServerStream
}

type goSpiderGetClientStreamServer struct {
	grpc.ServerStream
}

func (x *goSpiderGetClientStreamServer) SendAndClose(m *MessageRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goSpiderGetClientStreamServer) Recv() (*MessageReq, error) {
	m := new(MessageReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GoSpider_GetServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoSpiderServer).GetServerStream(m, &goSpiderGetServerStreamServer{stream})
}

type GoSpider_GetServerStreamServer interface {
	Send(*MessageRes) error
	grpc.ServerStream
}

type goSpiderGetServerStreamServer struct {
	grpc.ServerStream
}

func (x *goSpiderGetServerStreamServer) Send(m *MessageRes) error {
	return x.ServerStream.SendMsg(m)
}

func _GoSpider_GetTwoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoSpiderServer).GetTwoStream(&goSpiderGetTwoStreamServer{stream})
}

type GoSpider_GetTwoStreamServer interface {
	Send(*MessageRes) error
	Recv() (*MessageReq, error)
	grpc.ServerStream
}

type goSpiderGetTwoStreamServer struct {
	grpc.ServerStream
}

func (x *goSpiderGetTwoStreamServer) Send(m *MessageRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goSpiderGetTwoStreamServer) Recv() (*MessageReq, error) {
	m := new(MessageReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GoSpider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spider.GoSpider",
	HandlerType: (*GoSpiderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _GoSpider_GetMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClientStream",
			Handler:       _GoSpider_GetClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetServerStream",
			Handler:       _GoSpider_GetServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTwoStream",
			Handler:       _GoSpider_GetTwoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spider.proto",
}
