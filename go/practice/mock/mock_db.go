// Code generated by MockGen. DO NOT EDIT.
// Source: ./db.go

// Package mocks is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetGoodsPriceById mocks base method.
func (m *MockDB) GetGoodsPriceById(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoodsPriceById", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetGoodsPriceById indicates an expected call of GetGoodsPriceById.
func (mr *MockDBMockRecorder) GetGoodsPriceById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoodsPriceById", reflect.TypeOf((*MockDB)(nil).GetGoodsPriceById), arg0)
}

// GetNameById mocks base method.
func (m *MockDB) GetNameById(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameById", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNameById indicates an expected call of GetNameById.
func (mr *MockDBMockRecorder) GetNameById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameById", reflect.TypeOf((*MockDB)(nil).GetNameById), arg0)
}
