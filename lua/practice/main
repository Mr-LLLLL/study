#!/usr/local/bin/lua

print(math.type(1e1))
print(string.format("%a", 0.1))
print(string.format("%a", 15))
print(-9 // 2)

function round(x)
	local f = math.floor(x)
	if (x == f) or (x % 2.0 == 0.5) then
		return f
	else
		return math.floor(x + 0.5)
	end
end

print(round(3.5))
print(round(2.5))

print"tonumber"
print(tonumber("11", 5))
print(math.tointeger(1.1))


print(0xf)

a = {1,2}
b = a;
a[0] = 2;
a[0.1] = 3

for i, v in pairs(a) do
	print(i, v)
end

str = "hello"
print(str:upper())

--a = {}
--for i = 1, 10 do
--	a[i] = io.read()
--end
--
--for i, v in pairs(a) do
--	print(i, v)
--end
--
a = {1,2,3, nil}
a.a = 1
a[5] = 1
print(#a)
a[4] = 1
print(#a)

--[[
print "for in io.lines()"
t = {}
for line in io.lines() do	
	if line == "q" then break end
	table.insert(t, line)
end
--]]

--for _, v in ipairs(t) do
--	print(v)
--end

a = {}
a.a = a
print(type(a.a))
a.a.a.a = 3
print(type(a.a))
print(a.a)
print "\n"

function resMul ()
	return 1, 2, 3
end

t = {1,2, (resMul()),}

for _, v in pairs(t) do
	print(v)
end

t1 = {1, 2, 3, 4}
print(_VERSION)
print(t1.n)

for i = 0, 10 do
	if i == 5 then goto continue end
	print(i)
	::continue::
end

function outfunc(x)
	return function (x) return x end
end

for w in string.gmatch("hello", "l") do
	print(w)
end

print(string.gsub("(1(1(2)3)9)", "%b()", "0"))

print(string.match("a = [=[[[ something ]] ]==] ]=]; print(a)", "%[(=*)%[(.-)%]%1%]"))

function expand(s)
	return (string.gsub(s, "$(%w+)", _G))
end

name = "Lua"; status = "great"
print(expand("$name is $status, isn't it?"))

timeout = os.time() + 3600

print(os.date("%y-%m-%d %H:%M:%S", 0))
for i, v in pairs(os.date("*t")) do
	print(i .. ":" .. (v or 0))
end

s = string.pack("s", "hello")
print(#s)

list = nil
list = {next = list, value = 1}
list = {next = list, value = 2}
list = {next = list, value = 3}
local l = list
print"list:"
-- while l do
-- 	print(l.value)
-- 	l = l.next
-- end

local function getnext(list, node)
	if not node then
		return list
	else
		return node.next
	end
end

function traverse (list)
	return getnext, list, nil
end

for i, v in traverse(list) do
	print(v)
end

print ''

a = 'a "problematic" \\ string'
print(string.format("%q", a))

loadfile "test"
print(test)


local status, err = pcall(function () error {code = 123} end)
if not status then 
	print(err.code)
end

key = {}
tab = {}
tab.key = 1

local tab = {1,}

function tab:func()
	print(self[1])
end

print(tab:func())

-- inheritance
	
local Account = { balance = 0, }

function Account:new(o)
	o = o or {}
	self.__index = self
	setmetatable(o, self)
	return o
end

function Account:deposit(v)
	self.balance = self.balance + v
end

function Account:withdraw(v)
	if v > self.balance then
		error "insufficient funds"
	end
	self.balance = self.balance - v
end

account = Account:new()

print(account.balance)
print()

a = {}
mt = {__mode = "k"}
setmetatable(a, mt)
key = {}
a[key] = 1
key = {}
a[key] = 2
do
	local b = "hello"
	a[b] = 3
	local key1 = {}
	a[key1] = 4
end

collectgarbage()
for k, v in pairs(a) do 
	print(k, v) 
end

b = "a"

print()

local results = {}
setmetatable(results, {__mode = "v"})
function createRGB(r, g, b)
	local key = string.format("%d-%d-%d", r, g, b)
	local color = results[key]
	if color == nil then
		color = {red = r, green = g, blue = b}
		results[key] = color
	end
	return color
end

a = createRGB(1,2,3)

collectgarbage()

for k, v in pairs(results) do
	print(k, v.red)
end

print()
a = {}
b = {1,2,3,}
mt = {__index = b}
list = setmetatable(a, mt)
if list == a then
	print(true)
end

print()
function traceback()
	for level = 1, math.huge do
		local info = debug.getinfo(level, "Sl")
		if not info then break end
		if info.what == "C" then
			print(string.format("%d\tC function", level))
		else
			print(string.format("%d\t[%s]:%d", level, info.short_src, info.currentline))
		end
	end
end

print(traceback())

print("ok")


local co = coroutine.wrap(function() 
		for i = 1, 1000 do 
		print(i) 
		end
	end)
co()
print "end"

print("==================================================")
local t = {nil,nil,nil,8,8}
t[1]= nil
print(#t)

for i, k in ipairs(t) do
    print("hello")
end

